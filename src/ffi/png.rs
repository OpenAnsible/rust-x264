/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub const __llvm__: ::std::os::raw::c_uchar = 1;
pub const __clang__: ::std::os::raw::c_uchar = 1;
pub const __clang_major__: ::std::os::raw::c_uchar = 8;
pub const __clang_minor__: ::std::os::raw::c_uchar = 0;
pub const __clang_patchlevel__: ::std::os::raw::c_uchar = 0;
pub const __GNUC_MINOR__: ::std::os::raw::c_uchar = 2;
pub const __GNUC_PATCHLEVEL__: ::std::os::raw::c_uchar = 1;
pub const __GNUC__: ::std::os::raw::c_uchar = 4;
pub const __GXX_ABI_VERSION: ::std::os::raw::c_ushort = 1002;
pub const __ATOMIC_RELAXED: ::std::os::raw::c_uchar = 0;
pub const __ATOMIC_CONSUME: ::std::os::raw::c_uchar = 1;
pub const __ATOMIC_ACQUIRE: ::std::os::raw::c_uchar = 2;
pub const __ATOMIC_RELEASE: ::std::os::raw::c_uchar = 3;
pub const __ATOMIC_ACQ_REL: ::std::os::raw::c_uchar = 4;
pub const __ATOMIC_SEQ_CST: ::std::os::raw::c_uchar = 5;
pub const __PRAGMA_REDEFINE_EXTNAME: ::std::os::raw::c_uchar = 1;
pub const __CONSTANT_CFSTRINGS__: ::std::os::raw::c_uchar = 1;
pub const __BLOCKS__: ::std::os::raw::c_uchar = 1;
pub const __GXX_RTTI: ::std::os::raw::c_uchar = 1;
pub const __ORDER_LITTLE_ENDIAN__: ::std::os::raw::c_ushort = 1234;
pub const __ORDER_BIG_ENDIAN__: ::std::os::raw::c_ushort = 4321;
pub const __ORDER_PDP_ENDIAN__: ::std::os::raw::c_ushort = 3412;
pub const __BYTE_ORDER__: ::std::os::raw::c_ushort = 1234;
pub const __LITTLE_ENDIAN__: ::std::os::raw::c_uchar = 1;
pub const _LP64: ::std::os::raw::c_uchar = 1;
pub const __LP64__: ::std::os::raw::c_uchar = 1;
pub const __CHAR_BIT__: ::std::os::raw::c_uchar = 8;
pub const __SCHAR_MAX__: ::std::os::raw::c_uchar = 127;
pub const __SHRT_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __INT_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __LONG_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __LONG_LONG_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __WCHAR_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INTMAX_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __SIZE_MAX__: ::std::os::raw::c_char = -1;
pub const __UINTMAX_MAX__: ::std::os::raw::c_char = -1;
pub const __PTRDIFF_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INTPTR_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __UINTPTR_MAX__: ::std::os::raw::c_char = -1;
pub const __SIZEOF_DOUBLE__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_FLOAT__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_INT__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_LONG__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_LONG_DOUBLE__: ::std::os::raw::c_uchar = 16;
pub const __SIZEOF_LONG_LONG__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_POINTER__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_SHORT__: ::std::os::raw::c_uchar = 2;
pub const __SIZEOF_PTRDIFF_T__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_SIZE_T__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_WCHAR_T__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_WINT_T__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_INT128__: ::std::os::raw::c_uchar = 16;
pub const __INTMAX_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __PTRDIFF_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __INTPTR_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __SIZE_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __WCHAR_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __WINT_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __SIG_ATOMIC_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __SIG_ATOMIC_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINTMAX_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __UINTPTR_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __FLT_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __FLT_DIG__: ::std::os::raw::c_uchar = 6;
pub const __FLT_DECIMAL_DIG__: ::std::os::raw::c_uchar = 9;
pub const __FLT_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __FLT_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __FLT_MANT_DIG__: ::std::os::raw::c_uchar = 24;
pub const __FLT_MAX_10_EXP__: ::std::os::raw::c_uchar = 38;
pub const __FLT_MAX_EXP__: ::std::os::raw::c_uchar = 128;
pub const __FLT_MIN_10_EXP__: ::std::os::raw::c_char = -37;
pub const __FLT_MIN_EXP__: ::std::os::raw::c_char = -125;
pub const __DBL_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __DBL_DIG__: ::std::os::raw::c_uchar = 15;
pub const __DBL_DECIMAL_DIG__: ::std::os::raw::c_uchar = 17;
pub const __DBL_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __DBL_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __DBL_MANT_DIG__: ::std::os::raw::c_uchar = 53;
pub const __DBL_MAX_10_EXP__: ::std::os::raw::c_ushort = 308;
pub const __DBL_MAX_EXP__: ::std::os::raw::c_ushort = 1024;
pub const __DBL_MIN_10_EXP__: ::std::os::raw::c_short = -307;
pub const __DBL_MIN_EXP__: ::std::os::raw::c_short = -1021;
pub const __LDBL_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_DIG__: ::std::os::raw::c_uchar = 18;
pub const __LDBL_DECIMAL_DIG__: ::std::os::raw::c_uchar = 21;
pub const __LDBL_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_MANT_DIG__: ::std::os::raw::c_uchar = 64;
pub const __LDBL_MAX_10_EXP__: ::std::os::raw::c_ushort = 4932;
pub const __LDBL_MAX_EXP__: ::std::os::raw::c_ushort = 16384;
pub const __LDBL_MIN_10_EXP__: ::std::os::raw::c_short = -4931;
pub const __LDBL_MIN_EXP__: ::std::os::raw::c_short = -16381;
pub const __POINTER_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __BIGGEST_ALIGNMENT__: ::std::os::raw::c_uchar = 16;
pub const __UINT8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT64_MAX__: ::std::os::raw::c_char = -1;
pub const __INT64_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INT_LEAST8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT_LEAST8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT_LEAST16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT_LEAST16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT_LEAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT_LEAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT_LEAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __UINT_LEAST64_MAX__: ::std::os::raw::c_char = -1;
pub const __INT_FAST8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT_FAST8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT_FAST16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT_FAST16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT_FAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT_FAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT_FAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __UINT_FAST64_MAX__: ::std::os::raw::c_char = -1;
pub const __FINITE_MATH_ONLY__: ::std::os::raw::c_uchar = 0;
pub const __GNUC_STDC_INLINE__: ::std::os::raw::c_uchar = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: ::std::os::raw::c_uchar = 1;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __NO_INLINE__: ::std::os::raw::c_uchar = 1;
pub const __PIC__: ::std::os::raw::c_uchar = 2;
pub const __pic__: ::std::os::raw::c_uchar = 2;
pub const __FLT_EVAL_METHOD__: ::std::os::raw::c_uchar = 0;
pub const __FLT_RADIX__: ::std::os::raw::c_uchar = 2;
pub const __DECIMAL_DIG__: ::std::os::raw::c_uchar = 21;
pub const __SSP__: ::std::os::raw::c_uchar = 1;
pub const __amd64__: ::std::os::raw::c_uchar = 1;
pub const __amd64: ::std::os::raw::c_uchar = 1;
pub const __x86_64: ::std::os::raw::c_uchar = 1;
pub const __x86_64__: ::std::os::raw::c_uchar = 1;
pub const __core2: ::std::os::raw::c_uchar = 1;
pub const __core2__: ::std::os::raw::c_uchar = 1;
pub const __tune_core2__: ::std::os::raw::c_uchar = 1;
pub const __NO_MATH_INLINES: ::std::os::raw::c_uchar = 1;
pub const __FXSR__: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16: ::std::os::raw::c_uchar = 1;
pub const __SSE4_1__: ::std::os::raw::c_uchar = 1;
pub const __SSSE3__: ::std::os::raw::c_uchar = 1;
pub const __SSE3__: ::std::os::raw::c_uchar = 1;
pub const __SSE2__: ::std::os::raw::c_uchar = 1;
pub const __SSE2_MATH__: ::std::os::raw::c_uchar = 1;
pub const __SSE__: ::std::os::raw::c_uchar = 1;
pub const __SSE_MATH__: ::std::os::raw::c_uchar = 1;
pub const __MMX__: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: ::std::os::raw::c_uchar = 1;
pub const __APPLE_CC__: ::std::os::raw::c_ushort = 6000;
pub const __APPLE__: ::std::os::raw::c_uchar = 1;
pub const OBJC_NEW_PROPERTIES: ::std::os::raw::c_uchar = 1;
pub const __apple_build_version__: ::std::os::raw::c_uint = 8000038;
pub const __DYNAMIC__: ::std::os::raw::c_uchar = 1;
pub const __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__:
          ::std::os::raw::c_uint =
    101200;
pub const __MACH__: ::std::os::raw::c_uchar = 1;
pub const __STDC__: ::std::os::raw::c_uchar = 1;
pub const __STDC_HOSTED__: ::std::os::raw::c_uchar = 1;
pub const __STDC_VERSION__: ::std::os::raw::c_uint = 201112;
pub const __STDC_UTF_16__: ::std::os::raw::c_uchar = 1;
pub const __STDC_UTF_32__: ::std::os::raw::c_uchar = 1;
pub const PNG_LIBPNG_VER_SONUM: ::std::os::raw::c_uchar = 16;
pub const PNG_LIBPNG_VER_DLLNUM: ::std::os::raw::c_uchar = 16;
pub const PNG_LIBPNG_VER_MAJOR: ::std::os::raw::c_uchar = 1;
pub const PNG_LIBPNG_VER_MINOR: ::std::os::raw::c_uchar = 6;
pub const PNG_LIBPNG_VER_RELEASE: ::std::os::raw::c_uchar = 23;
pub const PNG_LIBPNG_VER_BUILD: ::std::os::raw::c_uchar = 0;
pub const PNG_LIBPNG_BUILD_ALPHA: ::std::os::raw::c_uchar = 1;
pub const PNG_LIBPNG_BUILD_BETA: ::std::os::raw::c_uchar = 2;
pub const PNG_LIBPNG_BUILD_RC: ::std::os::raw::c_uchar = 3;
pub const PNG_LIBPNG_BUILD_STABLE: ::std::os::raw::c_uchar = 4;
pub const PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK: ::std::os::raw::c_uchar = 7;
pub const PNG_LIBPNG_BUILD_PATCH: ::std::os::raw::c_uchar = 8;
pub const PNG_LIBPNG_BUILD_PRIVATE: ::std::os::raw::c_uchar = 16;
pub const PNG_LIBPNG_BUILD_SPECIAL: ::std::os::raw::c_uchar = 32;
pub const PNG_LIBPNG_BUILD_BASE_TYPE: ::std::os::raw::c_uchar = 4;
pub const PNG_LIBPNG_VER: ::std::os::raw::c_ushort = 10623;
pub const PNG_API_RULE: ::std::os::raw::c_uchar = 0;
pub const PNG_DEFAULT_READ_MACROS: ::std::os::raw::c_uchar = 1;
pub const PNG_GAMMA_THRESHOLD_FIXED: ::std::os::raw::c_ushort = 5000;
pub const PNG_INFLATE_BUF_SIZE: ::std::os::raw::c_ushort = 1024;
pub const PNG_MAX_GAMMA_8: ::std::os::raw::c_uchar = 11;
pub const PNG_QUANTIZE_BLUE_BITS: ::std::os::raw::c_uchar = 5;
pub const PNG_QUANTIZE_GREEN_BITS: ::std::os::raw::c_uchar = 5;
pub const PNG_QUANTIZE_RED_BITS: ::std::os::raw::c_uchar = 5;
pub const PNG_TEXT_Z_DEFAULT_COMPRESSION: ::std::os::raw::c_char = -1;
pub const PNG_TEXT_Z_DEFAULT_STRATEGY: ::std::os::raw::c_uchar = 0;
pub const PNG_USER_CHUNK_CACHE_MAX: ::std::os::raw::c_ushort = 1000;
pub const PNG_USER_CHUNK_MALLOC_MAX: ::std::os::raw::c_uint = 8000000;
pub const PNG_USER_HEIGHT_MAX: ::std::os::raw::c_uint = 1000000;
pub const PNG_USER_WIDTH_MAX: ::std::os::raw::c_uint = 1000000;
pub const PNG_ZBUF_SIZE: ::std::os::raw::c_ushort = 8192;
pub const PNG_ZLIB_VERNUM: ::std::os::raw::c_ushort = 4688;
pub const PNG_Z_DEFAULT_COMPRESSION: ::std::os::raw::c_char = -1;
pub const PNG_Z_DEFAULT_NOFILTER_STRATEGY: ::std::os::raw::c_uchar = 0;
pub const PNG_Z_DEFAULT_STRATEGY: ::std::os::raw::c_uchar = 1;
pub const PNG_sCAL_PRECISION: ::std::os::raw::c_uchar = 5;
pub const PNG_sRGB_PROFILE_CHECKS: ::std::os::raw::c_uchar = 2;
pub const __DARWIN_ONLY_64_BIT_INO_T: ::std::os::raw::c_uchar = 0;
pub const __DARWIN_ONLY_VERS_1050: ::std::os::raw::c_uchar = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uchar = 1;
pub const __DARWIN_UNIX03: ::std::os::raw::c_uchar = 1;
pub const __DARWIN_64_BIT_INO_T: ::std::os::raw::c_uchar = 1;
pub const __DARWIN_VERS_1050: ::std::os::raw::c_uchar = 1;
pub const __DARWIN_NON_CANCELABLE: ::std::os::raw::c_uchar = 0;
pub const __DARWIN_C_ANSI: ::std::os::raw::c_ushort = 4096;
pub const __DARWIN_C_FULL: ::std::os::raw::c_uint = 900000;
pub const __DARWIN_C_LEVEL: ::std::os::raw::c_uint = 900000;
pub const __STDC_WANT_LIB_EXT1__: ::std::os::raw::c_uchar = 1;
pub const _DARWIN_FEATURE_64_BIT_INODE: ::std::os::raw::c_uchar = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uchar = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: ::std::os::raw::c_uchar = 3;
pub const __DARWIN_CLK_TCK: ::std::os::raw::c_uchar = 100;
pub const CHAR_BIT: ::std::os::raw::c_uchar = 8;
pub const MB_LEN_MAX: ::std::os::raw::c_uchar = 6;
pub const CLK_TCK: ::std::os::raw::c_uchar = 100;
pub const SCHAR_MAX: ::std::os::raw::c_uchar = 127;
pub const SCHAR_MIN: ::std::os::raw::c_char = -128;
pub const UCHAR_MAX: ::std::os::raw::c_uchar = 255;
pub const CHAR_MAX: ::std::os::raw::c_uchar = 127;
pub const CHAR_MIN: ::std::os::raw::c_char = -128;
pub const USHRT_MAX: ::std::os::raw::c_ushort = 65535;
pub const SHRT_MAX: ::std::os::raw::c_ushort = 32767;
pub const SHRT_MIN: ::std::os::raw::c_short = -32768;
pub const UINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_MIN: ::std::os::raw::c_int = -2147483648;
pub const ULONG_MAX: ::std::os::raw::c_char = -1;
pub const LONG_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const LONG_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const ULLONG_MAX: ::std::os::raw::c_char = -1;
pub const LLONG_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const LLONG_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const LONG_BIT: ::std::os::raw::c_uchar = 64;
pub const SSIZE_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const WORD_BIT: ::std::os::raw::c_uchar = 32;
pub const SIZE_T_MAX: ::std::os::raw::c_char = -1;
pub const UQUAD_MAX: ::std::os::raw::c_char = -1;
pub const QUAD_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const QUAD_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const ARG_MAX: ::std::os::raw::c_uint = 262144;
pub const CHILD_MAX: ::std::os::raw::c_ushort = 266;
pub const GID_MAX: ::std::os::raw::c_uint = 2147483647;
pub const LINK_MAX: ::std::os::raw::c_ushort = 32767;
pub const MAX_CANON: ::std::os::raw::c_ushort = 1024;
pub const MAX_INPUT: ::std::os::raw::c_ushort = 1024;
pub const NAME_MAX: ::std::os::raw::c_uchar = 255;
pub const NGROUPS_MAX: ::std::os::raw::c_uchar = 16;
pub const UID_MAX: ::std::os::raw::c_uint = 2147483647;
pub const OPEN_MAX: ::std::os::raw::c_ushort = 10240;
pub const PATH_MAX: ::std::os::raw::c_ushort = 1024;
pub const PIPE_BUF: ::std::os::raw::c_ushort = 512;
pub const BC_BASE_MAX: ::std::os::raw::c_uchar = 99;
pub const BC_DIM_MAX: ::std::os::raw::c_ushort = 2048;
pub const BC_SCALE_MAX: ::std::os::raw::c_uchar = 99;
pub const BC_STRING_MAX: ::std::os::raw::c_ushort = 1000;
pub const CHARCLASS_NAME_MAX: ::std::os::raw::c_uchar = 14;
pub const COLL_WEIGHTS_MAX: ::std::os::raw::c_uchar = 2;
pub const EQUIV_CLASS_MAX: ::std::os::raw::c_uchar = 2;
pub const EXPR_NEST_MAX: ::std::os::raw::c_uchar = 32;
pub const LINE_MAX: ::std::os::raw::c_ushort = 2048;
pub const RE_DUP_MAX: ::std::os::raw::c_uchar = 255;
pub const NZERO: ::std::os::raw::c_uchar = 20;
pub const _POSIX_ARG_MAX: ::std::os::raw::c_ushort = 4096;
pub const _POSIX_CHILD_MAX: ::std::os::raw::c_uchar = 25;
pub const _POSIX_LINK_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_MAX_CANON: ::std::os::raw::c_uchar = 255;
pub const _POSIX_MAX_INPUT: ::std::os::raw::c_uchar = 255;
pub const _POSIX_NAME_MAX: ::std::os::raw::c_uchar = 14;
pub const _POSIX_NGROUPS_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_OPEN_MAX: ::std::os::raw::c_uchar = 20;
pub const _POSIX_PATH_MAX: ::std::os::raw::c_ushort = 256;
pub const _POSIX_PIPE_BUF: ::std::os::raw::c_ushort = 512;
pub const _POSIX_SSIZE_MAX: ::std::os::raw::c_ushort = 32767;
pub const _POSIX_STREAM_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_TZNAME_MAX: ::std::os::raw::c_uchar = 6;
pub const _POSIX2_BC_BASE_MAX: ::std::os::raw::c_uchar = 99;
pub const _POSIX2_BC_DIM_MAX: ::std::os::raw::c_ushort = 2048;
pub const _POSIX2_BC_SCALE_MAX: ::std::os::raw::c_uchar = 99;
pub const _POSIX2_BC_STRING_MAX: ::std::os::raw::c_ushort = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: ::std::os::raw::c_uchar = 2;
pub const _POSIX2_EXPR_NEST_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX2_LINE_MAX: ::std::os::raw::c_ushort = 2048;
pub const _POSIX2_RE_DUP_MAX: ::std::os::raw::c_uchar = 255;
pub const _POSIX_AIO_LISTIO_MAX: ::std::os::raw::c_uchar = 2;
pub const _POSIX_AIO_MAX: ::std::os::raw::c_uchar = 1;
pub const _POSIX_DELAYTIMER_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_MQ_OPEN_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_MQ_PRIO_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_RTSIG_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_SEM_NSEMS_MAX: ::std::os::raw::c_ushort = 256;
pub const _POSIX_SEM_VALUE_MAX: ::std::os::raw::c_ushort = 32767;
pub const _POSIX_SIGQUEUE_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_TIMER_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uchar = 4;
pub const _POSIX_THREAD_KEYS_MAX: ::std::os::raw::c_uchar = 128;
pub const _POSIX_THREAD_THREADS_MAX: ::std::os::raw::c_uchar = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uchar = 4;
pub const PTHREAD_KEYS_MAX: ::std::os::raw::c_ushort = 512;
pub const PTHREAD_STACK_MIN: ::std::os::raw::c_ushort = 8192;
pub const _POSIX_HOST_NAME_MAX: ::std::os::raw::c_uchar = 255;
pub const _POSIX_LOGIN_NAME_MAX: ::std::os::raw::c_uchar = 9;
pub const _POSIX_SS_REPL_MAX: ::std::os::raw::c_uchar = 4;
pub const _POSIX_SYMLINK_MAX: ::std::os::raw::c_uchar = 255;
pub const _POSIX_SYMLOOP_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: ::std::os::raw::c_uchar = 30;
pub const _POSIX_TRACE_NAME_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_TRACE_SYS_MAX: ::std::os::raw::c_uchar = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: ::std::os::raw::c_uchar = 32;
pub const _POSIX_TTY_NAME_MAX: ::std::os::raw::c_uchar = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: ::std::os::raw::c_uchar = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: ::std::os::raw::c_uchar = 2;
pub const _POSIX_RE_DUP_MAX: ::std::os::raw::c_uchar = 255;
pub const OFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const OFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const PASS_MAX: ::std::os::raw::c_uchar = 128;
pub const NL_ARGMAX: ::std::os::raw::c_uchar = 9;
pub const NL_LANGMAX: ::std::os::raw::c_uchar = 14;
pub const NL_MSGMAX: ::std::os::raw::c_ushort = 32767;
pub const NL_NMAX: ::std::os::raw::c_uchar = 1;
pub const NL_SETMAX: ::std::os::raw::c_uchar = 255;
pub const NL_TEXTMAX: ::std::os::raw::c_ushort = 2048;
pub const _XOPEN_IOV_MAX: ::std::os::raw::c_uchar = 16;
pub const IOV_MAX: ::std::os::raw::c_ushort = 1024;
pub const _XOPEN_NAME_MAX: ::std::os::raw::c_uchar = 255;
pub const _XOPEN_PATH_MAX: ::std::os::raw::c_ushort = 1024;
pub const LONG_LONG_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const LONG_LONG_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const ULONG_LONG_MAX: ::std::os::raw::c_char = -1;
pub const __MAC_10_0: ::std::os::raw::c_ushort = 1000;
pub const __MAC_10_1: ::std::os::raw::c_ushort = 1010;
pub const __MAC_10_2: ::std::os::raw::c_ushort = 1020;
pub const __MAC_10_3: ::std::os::raw::c_ushort = 1030;
pub const __MAC_10_4: ::std::os::raw::c_ushort = 1040;
pub const __MAC_10_5: ::std::os::raw::c_ushort = 1050;
pub const __MAC_10_6: ::std::os::raw::c_ushort = 1060;
pub const __MAC_10_7: ::std::os::raw::c_ushort = 1070;
pub const __MAC_10_8: ::std::os::raw::c_ushort = 1080;
pub const __MAC_10_9: ::std::os::raw::c_ushort = 1090;
pub const __MAC_10_10: ::std::os::raw::c_uint = 101000;
pub const __MAC_10_10_2: ::std::os::raw::c_uint = 101002;
pub const __MAC_10_10_3: ::std::os::raw::c_uint = 101003;
pub const __MAC_10_11: ::std::os::raw::c_uint = 101100;
pub const __MAC_10_11_2: ::std::os::raw::c_uint = 101102;
pub const __MAC_10_11_3: ::std::os::raw::c_uint = 101103;
pub const __MAC_10_11_4: ::std::os::raw::c_uint = 101104;
pub const __MAC_10_12: ::std::os::raw::c_uint = 101200;
pub const __IPHONE_2_0: ::std::os::raw::c_ushort = 20000;
pub const __IPHONE_2_1: ::std::os::raw::c_ushort = 20100;
pub const __IPHONE_2_2: ::std::os::raw::c_ushort = 20200;
pub const __IPHONE_3_0: ::std::os::raw::c_ushort = 30000;
pub const __IPHONE_3_1: ::std::os::raw::c_ushort = 30100;
pub const __IPHONE_3_2: ::std::os::raw::c_ushort = 30200;
pub const __IPHONE_4_0: ::std::os::raw::c_ushort = 40000;
pub const __IPHONE_4_1: ::std::os::raw::c_ushort = 40100;
pub const __IPHONE_4_2: ::std::os::raw::c_ushort = 40200;
pub const __IPHONE_4_3: ::std::os::raw::c_ushort = 40300;
pub const __IPHONE_5_0: ::std::os::raw::c_ushort = 50000;
pub const __IPHONE_5_1: ::std::os::raw::c_ushort = 50100;
pub const __IPHONE_6_0: ::std::os::raw::c_ushort = 60000;
pub const __IPHONE_6_1: ::std::os::raw::c_ushort = 60100;
pub const __IPHONE_7_0: ::std::os::raw::c_uint = 70000;
pub const __IPHONE_7_1: ::std::os::raw::c_uint = 70100;
pub const __IPHONE_8_0: ::std::os::raw::c_uint = 80000;
pub const __IPHONE_8_1: ::std::os::raw::c_uint = 80100;
pub const __IPHONE_8_2: ::std::os::raw::c_uint = 80200;
pub const __IPHONE_8_3: ::std::os::raw::c_uint = 80300;
pub const __IPHONE_8_4: ::std::os::raw::c_uint = 80400;
pub const __IPHONE_9_0: ::std::os::raw::c_uint = 90000;
pub const __IPHONE_9_1: ::std::os::raw::c_uint = 90100;
pub const __IPHONE_9_2: ::std::os::raw::c_uint = 90200;
pub const __IPHONE_9_3: ::std::os::raw::c_uint = 90300;
pub const __IPHONE_10_0: ::std::os::raw::c_uint = 100000;
pub const __TVOS_9_0: ::std::os::raw::c_uint = 90000;
pub const __TVOS_9_1: ::std::os::raw::c_uint = 90100;
pub const __TVOS_9_2: ::std::os::raw::c_uint = 90200;
pub const __TVOS_10_0: ::std::os::raw::c_uint = 100000;
pub const __WATCHOS_1_0: ::std::os::raw::c_ushort = 10000;
pub const __WATCHOS_2_0: ::std::os::raw::c_ushort = 20000;
pub const __WATCHOS_3_0: ::std::os::raw::c_ushort = 30000;
pub const __MAC_OS_X_VERSION_MIN_REQUIRED: ::std::os::raw::c_uint = 101200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: ::std::os::raw::c_uint = 101200;
pub const __PTHREAD_SIZE__: ::std::os::raw::c_ushort = 8176;
pub const __PTHREAD_ATTR_SIZE__: ::std::os::raw::c_uchar = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: ::std::os::raw::c_uchar = 8;
pub const __PTHREAD_MUTEX_SIZE__: ::std::os::raw::c_uchar = 56;
pub const __PTHREAD_CONDATTR_SIZE__: ::std::os::raw::c_uchar = 8;
pub const __PTHREAD_COND_SIZE__: ::std::os::raw::c_uchar = 40;
pub const __PTHREAD_ONCE_SIZE__: ::std::os::raw::c_uchar = 8;
pub const __PTHREAD_RWLOCK_SIZE__: ::std::os::raw::c_uchar = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: ::std::os::raw::c_uchar = 16;
pub const __DARWIN_WCHAR_MAX: ::std::os::raw::c_uint = 2147483647;
pub const __DARWIN_WCHAR_MIN: ::std::os::raw::c_int = -2147483648;
pub const _FORTIFY_SOURCE: ::std::os::raw::c_uchar = 2;
pub const RENAME_SECLUDE: ::std::os::raw::c_uchar = 1;
pub const RENAME_SWAP: ::std::os::raw::c_uchar = 2;
pub const RENAME_EXCL: ::std::os::raw::c_uchar = 4;
pub const __SLBF: ::std::os::raw::c_uchar = 1;
pub const __SNBF: ::std::os::raw::c_uchar = 2;
pub const __SRD: ::std::os::raw::c_uchar = 4;
pub const __SWR: ::std::os::raw::c_uchar = 8;
pub const __SRW: ::std::os::raw::c_uchar = 16;
pub const __SEOF: ::std::os::raw::c_uchar = 32;
pub const __SERR: ::std::os::raw::c_uchar = 64;
pub const __SMBF: ::std::os::raw::c_uchar = 128;
pub const __SAPP: ::std::os::raw::c_ushort = 256;
pub const __SSTR: ::std::os::raw::c_ushort = 512;
pub const __SOPT: ::std::os::raw::c_ushort = 1024;
pub const __SNPT: ::std::os::raw::c_ushort = 2048;
pub const __SOFF: ::std::os::raw::c_ushort = 4096;
pub const __SMOD: ::std::os::raw::c_ushort = 8192;
pub const __SALC: ::std::os::raw::c_ushort = 16384;
pub const __SIGN: ::std::os::raw::c_ushort = 32768;
pub const _IOFBF: ::std::os::raw::c_uchar = 0;
pub const _IOLBF: ::std::os::raw::c_uchar = 1;
pub const _IONBF: ::std::os::raw::c_uchar = 2;
pub const BUFSIZ: ::std::os::raw::c_ushort = 1024;
pub const EOF: ::std::os::raw::c_char = -1;
pub const FOPEN_MAX: ::std::os::raw::c_uchar = 20;
pub const FILENAME_MAX: ::std::os::raw::c_ushort = 1024;
pub const L_tmpnam: ::std::os::raw::c_ushort = 1024;
pub const TMP_MAX: ::std::os::raw::c_uint = 308915776;
pub const SEEK_SET: ::std::os::raw::c_uchar = 0;
pub const SEEK_CUR: ::std::os::raw::c_uchar = 1;
pub const SEEK_END: ::std::os::raw::c_uchar = 2;
pub const L_ctermid: ::std::os::raw::c_ushort = 1024;
pub const __CTERMID_DEFINED: ::std::os::raw::c_uchar = 1;
pub const _USE_FORTIFY_LEVEL: ::std::os::raw::c_uchar = 2;
pub const _JBLEN: ::std::os::raw::c_uchar = 37;
pub const CLOCKS_PER_SEC: ::std::os::raw::c_uint = 1000000;
pub const PNG_LIBPNG_BUILD_TYPE: ::std::os::raw::c_uchar = 4;
pub const PNG_TEXT_COMPRESSION_NONE_WR: ::std::os::raw::c_char = -3;
pub const PNG_TEXT_COMPRESSION_zTXt_WR: ::std::os::raw::c_char = -2;
pub const PNG_TEXT_COMPRESSION_NONE: ::std::os::raw::c_char = -1;
pub const PNG_TEXT_COMPRESSION_zTXt: ::std::os::raw::c_uchar = 0;
pub const PNG_ITXT_COMPRESSION_NONE: ::std::os::raw::c_uchar = 1;
pub const PNG_ITXT_COMPRESSION_zTXt: ::std::os::raw::c_uchar = 2;
pub const PNG_TEXT_COMPRESSION_LAST: ::std::os::raw::c_uchar = 3;
pub const PNG_HAVE_IHDR: ::std::os::raw::c_uchar = 1;
pub const PNG_HAVE_PLTE: ::std::os::raw::c_uchar = 2;
pub const PNG_AFTER_IDAT: ::std::os::raw::c_uchar = 8;
pub const PNG_FP_1: ::std::os::raw::c_uint = 100000;
pub const PNG_FP_HALF: ::std::os::raw::c_ushort = 50000;
pub const PNG_COLOR_MASK_PALETTE: ::std::os::raw::c_uchar = 1;
pub const PNG_COLOR_MASK_COLOR: ::std::os::raw::c_uchar = 2;
pub const PNG_COLOR_MASK_ALPHA: ::std::os::raw::c_uchar = 4;
pub const PNG_COLOR_TYPE_GRAY: ::std::os::raw::c_uchar = 0;
pub const PNG_COLOR_TYPE_PALETTE: ::std::os::raw::c_uchar = 3;
pub const PNG_COLOR_TYPE_RGB: ::std::os::raw::c_uchar = 2;
pub const PNG_COLOR_TYPE_RGB_ALPHA: ::std::os::raw::c_uchar = 6;
pub const PNG_COLOR_TYPE_GRAY_ALPHA: ::std::os::raw::c_uchar = 4;
pub const PNG_COLOR_TYPE_RGBA: ::std::os::raw::c_uchar = 6;
pub const PNG_COLOR_TYPE_GA: ::std::os::raw::c_uchar = 4;
pub const PNG_COMPRESSION_TYPE_BASE: ::std::os::raw::c_uchar = 0;
pub const PNG_COMPRESSION_TYPE_DEFAULT: ::std::os::raw::c_uchar = 0;
pub const PNG_FILTER_TYPE_BASE: ::std::os::raw::c_uchar = 0;
pub const PNG_INTRAPIXEL_DIFFERENCING: ::std::os::raw::c_uchar = 64;
pub const PNG_FILTER_TYPE_DEFAULT: ::std::os::raw::c_uchar = 0;
pub const PNG_INTERLACE_NONE: ::std::os::raw::c_uchar = 0;
pub const PNG_INTERLACE_ADAM7: ::std::os::raw::c_uchar = 1;
pub const PNG_INTERLACE_LAST: ::std::os::raw::c_uchar = 2;
pub const PNG_OFFSET_PIXEL: ::std::os::raw::c_uchar = 0;
pub const PNG_OFFSET_MICROMETER: ::std::os::raw::c_uchar = 1;
pub const PNG_OFFSET_LAST: ::std::os::raw::c_uchar = 2;
pub const PNG_EQUATION_LINEAR: ::std::os::raw::c_uchar = 0;
pub const PNG_EQUATION_BASE_E: ::std::os::raw::c_uchar = 1;
pub const PNG_EQUATION_ARBITRARY: ::std::os::raw::c_uchar = 2;
pub const PNG_EQUATION_HYPERBOLIC: ::std::os::raw::c_uchar = 3;
pub const PNG_EQUATION_LAST: ::std::os::raw::c_uchar = 4;
pub const PNG_SCALE_UNKNOWN: ::std::os::raw::c_uchar = 0;
pub const PNG_SCALE_METER: ::std::os::raw::c_uchar = 1;
pub const PNG_SCALE_RADIAN: ::std::os::raw::c_uchar = 2;
pub const PNG_SCALE_LAST: ::std::os::raw::c_uchar = 3;
pub const PNG_RESOLUTION_UNKNOWN: ::std::os::raw::c_uchar = 0;
pub const PNG_RESOLUTION_METER: ::std::os::raw::c_uchar = 1;
pub const PNG_RESOLUTION_LAST: ::std::os::raw::c_uchar = 2;
pub const PNG_sRGB_INTENT_PERCEPTUAL: ::std::os::raw::c_uchar = 0;
pub const PNG_sRGB_INTENT_RELATIVE: ::std::os::raw::c_uchar = 1;
pub const PNG_sRGB_INTENT_SATURATION: ::std::os::raw::c_uchar = 2;
pub const PNG_sRGB_INTENT_ABSOLUTE: ::std::os::raw::c_uchar = 3;
pub const PNG_sRGB_INTENT_LAST: ::std::os::raw::c_uchar = 4;
pub const PNG_KEYWORD_MAX_LENGTH: ::std::os::raw::c_uchar = 79;
pub const PNG_MAX_PALETTE_LENGTH: ::std::os::raw::c_ushort = 256;
pub const PNG_INFO_gAMA: ::std::os::raw::c_uchar = 1;
pub const PNG_INFO_sBIT: ::std::os::raw::c_uchar = 2;
pub const PNG_INFO_cHRM: ::std::os::raw::c_uchar = 4;
pub const PNG_INFO_PLTE: ::std::os::raw::c_uchar = 8;
pub const PNG_INFO_tRNS: ::std::os::raw::c_uchar = 16;
pub const PNG_INFO_bKGD: ::std::os::raw::c_uchar = 32;
pub const PNG_INFO_hIST: ::std::os::raw::c_uchar = 64;
pub const PNG_INFO_pHYs: ::std::os::raw::c_uchar = 128;
pub const PNG_INFO_oFFs: ::std::os::raw::c_ushort = 256;
pub const PNG_INFO_tIME: ::std::os::raw::c_ushort = 512;
pub const PNG_INFO_pCAL: ::std::os::raw::c_ushort = 1024;
pub const PNG_INFO_sRGB: ::std::os::raw::c_ushort = 2048;
pub const PNG_INFO_iCCP: ::std::os::raw::c_ushort = 4096;
pub const PNG_INFO_sPLT: ::std::os::raw::c_ushort = 8192;
pub const PNG_INFO_sCAL: ::std::os::raw::c_ushort = 16384;
pub const PNG_INFO_IDAT: ::std::os::raw::c_ushort = 32768;
pub const PNG_TRANSFORM_IDENTITY: ::std::os::raw::c_uchar = 0;
pub const PNG_TRANSFORM_STRIP_16: ::std::os::raw::c_uchar = 1;
pub const PNG_TRANSFORM_STRIP_ALPHA: ::std::os::raw::c_uchar = 2;
pub const PNG_TRANSFORM_PACKING: ::std::os::raw::c_uchar = 4;
pub const PNG_TRANSFORM_PACKSWAP: ::std::os::raw::c_uchar = 8;
pub const PNG_TRANSFORM_EXPAND: ::std::os::raw::c_uchar = 16;
pub const PNG_TRANSFORM_INVERT_MONO: ::std::os::raw::c_uchar = 32;
pub const PNG_TRANSFORM_SHIFT: ::std::os::raw::c_uchar = 64;
pub const PNG_TRANSFORM_BGR: ::std::os::raw::c_uchar = 128;
pub const PNG_TRANSFORM_SWAP_ALPHA: ::std::os::raw::c_ushort = 256;
pub const PNG_TRANSFORM_SWAP_ENDIAN: ::std::os::raw::c_ushort = 512;
pub const PNG_TRANSFORM_INVERT_ALPHA: ::std::os::raw::c_ushort = 1024;
pub const PNG_TRANSFORM_STRIP_FILLER: ::std::os::raw::c_ushort = 2048;
pub const PNG_TRANSFORM_STRIP_FILLER_BEFORE: ::std::os::raw::c_ushort = 2048;
pub const PNG_TRANSFORM_STRIP_FILLER_AFTER: ::std::os::raw::c_ushort = 4096;
pub const PNG_TRANSFORM_GRAY_TO_RGB: ::std::os::raw::c_ushort = 8192;
pub const PNG_TRANSFORM_EXPAND_16: ::std::os::raw::c_ushort = 16384;
pub const PNG_TRANSFORM_SCALE_16: ::std::os::raw::c_ushort = 32768;
pub const PNG_FLAG_MNG_EMPTY_PLTE: ::std::os::raw::c_uchar = 1;
pub const PNG_FLAG_MNG_FILTER_64: ::std::os::raw::c_uchar = 4;
pub const PNG_ALL_MNG_FEATURES: ::std::os::raw::c_uchar = 5;
pub const PNG_ERROR_ACTION_NONE: ::std::os::raw::c_uchar = 1;
pub const PNG_ERROR_ACTION_WARN: ::std::os::raw::c_uchar = 2;
pub const PNG_ERROR_ACTION_ERROR: ::std::os::raw::c_uchar = 3;
pub const PNG_RGB_TO_GRAY_DEFAULT: ::std::os::raw::c_char = -1;
pub const PNG_ALPHA_PNG: ::std::os::raw::c_uchar = 0;
pub const PNG_ALPHA_STANDARD: ::std::os::raw::c_uchar = 1;
pub const PNG_ALPHA_ASSOCIATED: ::std::os::raw::c_uchar = 1;
pub const PNG_ALPHA_PREMULTIPLIED: ::std::os::raw::c_uchar = 1;
pub const PNG_ALPHA_OPTIMIZED: ::std::os::raw::c_uchar = 2;
pub const PNG_ALPHA_BROKEN: ::std::os::raw::c_uchar = 3;
pub const PNG_DEFAULT_sRGB: ::std::os::raw::c_char = -1;
pub const PNG_GAMMA_MAC_18: ::std::os::raw::c_char = -2;
pub const PNG_GAMMA_sRGB: ::std::os::raw::c_uint = 220000;
pub const PNG_GAMMA_LINEAR: ::std::os::raw::c_uint = 100000;
pub const PNG_FILLER_BEFORE: ::std::os::raw::c_uchar = 0;
pub const PNG_FILLER_AFTER: ::std::os::raw::c_uchar = 1;
pub const PNG_BACKGROUND_GAMMA_UNKNOWN: ::std::os::raw::c_uchar = 0;
pub const PNG_BACKGROUND_GAMMA_SCREEN: ::std::os::raw::c_uchar = 1;
pub const PNG_BACKGROUND_GAMMA_FILE: ::std::os::raw::c_uchar = 2;
pub const PNG_BACKGROUND_GAMMA_UNIQUE: ::std::os::raw::c_uchar = 3;
pub const PNG_CRC_DEFAULT: ::std::os::raw::c_uchar = 0;
pub const PNG_CRC_ERROR_QUIT: ::std::os::raw::c_uchar = 1;
pub const PNG_CRC_WARN_DISCARD: ::std::os::raw::c_uchar = 2;
pub const PNG_CRC_WARN_USE: ::std::os::raw::c_uchar = 3;
pub const PNG_CRC_QUIET_USE: ::std::os::raw::c_uchar = 4;
pub const PNG_CRC_NO_CHANGE: ::std::os::raw::c_uchar = 5;
pub const PNG_NO_FILTERS: ::std::os::raw::c_uchar = 0;
pub const PNG_FILTER_NONE: ::std::os::raw::c_uchar = 8;
pub const PNG_FILTER_SUB: ::std::os::raw::c_uchar = 16;
pub const PNG_FILTER_UP: ::std::os::raw::c_uchar = 32;
pub const PNG_FILTER_AVG: ::std::os::raw::c_uchar = 64;
pub const PNG_FILTER_PAETH: ::std::os::raw::c_uchar = 128;
pub const PNG_FAST_FILTERS: ::std::os::raw::c_uchar = 56;
pub const PNG_ALL_FILTERS: ::std::os::raw::c_uchar = 248;
pub const PNG_FILTER_VALUE_NONE: ::std::os::raw::c_uchar = 0;
pub const PNG_FILTER_VALUE_SUB: ::std::os::raw::c_uchar = 1;
pub const PNG_FILTER_VALUE_UP: ::std::os::raw::c_uchar = 2;
pub const PNG_FILTER_VALUE_AVG: ::std::os::raw::c_uchar = 3;
pub const PNG_FILTER_VALUE_PAETH: ::std::os::raw::c_uchar = 4;
pub const PNG_FILTER_VALUE_LAST: ::std::os::raw::c_uchar = 5;
pub const PNG_FILTER_HEURISTIC_DEFAULT: ::std::os::raw::c_uchar = 0;
pub const PNG_FILTER_HEURISTIC_UNWEIGHTED: ::std::os::raw::c_uchar = 1;
pub const PNG_FILTER_HEURISTIC_WEIGHTED: ::std::os::raw::c_uchar = 2;
pub const PNG_FILTER_HEURISTIC_LAST: ::std::os::raw::c_uchar = 3;
pub const PNG_DESTROY_WILL_FREE_DATA: ::std::os::raw::c_uchar = 1;
pub const PNG_SET_WILL_FREE_DATA: ::std::os::raw::c_uchar = 1;
pub const PNG_USER_WILL_FREE_DATA: ::std::os::raw::c_uchar = 2;
pub const PNG_FREE_HIST: ::std::os::raw::c_uchar = 8;
pub const PNG_FREE_ICCP: ::std::os::raw::c_uchar = 16;
pub const PNG_FREE_SPLT: ::std::os::raw::c_uchar = 32;
pub const PNG_FREE_ROWS: ::std::os::raw::c_uchar = 64;
pub const PNG_FREE_PCAL: ::std::os::raw::c_uchar = 128;
pub const PNG_FREE_SCAL: ::std::os::raw::c_ushort = 256;
pub const PNG_FREE_UNKN: ::std::os::raw::c_ushort = 512;
pub const PNG_FREE_PLTE: ::std::os::raw::c_ushort = 4096;
pub const PNG_FREE_TRNS: ::std::os::raw::c_ushort = 8192;
pub const PNG_FREE_TEXT: ::std::os::raw::c_ushort = 16384;
pub const PNG_FREE_ALL: ::std::os::raw::c_ushort = 32767;
pub const PNG_FREE_MUL: ::std::os::raw::c_ushort = 16928;
pub const PNG_HANDLE_CHUNK_AS_DEFAULT: ::std::os::raw::c_uchar = 0;
pub const PNG_HANDLE_CHUNK_NEVER: ::std::os::raw::c_uchar = 1;
pub const PNG_HANDLE_CHUNK_IF_SAFE: ::std::os::raw::c_uchar = 2;
pub const PNG_HANDLE_CHUNK_ALWAYS: ::std::os::raw::c_uchar = 3;
pub const PNG_HANDLE_CHUNK_LAST: ::std::os::raw::c_uchar = 4;
pub const PNG_IO_NONE: ::std::os::raw::c_uchar = 0;
pub const PNG_IO_READING: ::std::os::raw::c_uchar = 1;
pub const PNG_IO_WRITING: ::std::os::raw::c_uchar = 2;
pub const PNG_IO_SIGNATURE: ::std::os::raw::c_uchar = 16;
pub const PNG_IO_CHUNK_HDR: ::std::os::raw::c_uchar = 32;
pub const PNG_IO_CHUNK_DATA: ::std::os::raw::c_uchar = 64;
pub const PNG_IO_CHUNK_CRC: ::std::os::raw::c_uchar = 128;
pub const PNG_IO_MASK_OP: ::std::os::raw::c_uchar = 15;
pub const PNG_IO_MASK_LOC: ::std::os::raw::c_uchar = 240;
pub const PNG_INTERLACE_ADAM7_PASSES: ::std::os::raw::c_uchar = 7;
pub const PNG_IMAGE_VERSION: ::std::os::raw::c_uchar = 1;
pub const PNG_IMAGE_WARNING: ::std::os::raw::c_uchar = 1;
pub const PNG_IMAGE_ERROR: ::std::os::raw::c_uchar = 2;
pub const PNG_FORMAT_FLAG_ALPHA: ::std::os::raw::c_uchar = 1;
pub const PNG_FORMAT_FLAG_COLOR: ::std::os::raw::c_uchar = 2;
pub const PNG_FORMAT_FLAG_LINEAR: ::std::os::raw::c_uchar = 4;
pub const PNG_FORMAT_FLAG_COLORMAP: ::std::os::raw::c_uchar = 8;
pub const PNG_FORMAT_FLAG_BGR: ::std::os::raw::c_uchar = 16;
pub const PNG_FORMAT_FLAG_AFIRST: ::std::os::raw::c_uchar = 32;
pub const PNG_FORMAT_GRAY: ::std::os::raw::c_uchar = 0;
pub const PNG_FORMAT_GA: ::std::os::raw::c_uchar = 1;
pub const PNG_FORMAT_AG: ::std::os::raw::c_uchar = 33;
pub const PNG_FORMAT_RGB: ::std::os::raw::c_uchar = 2;
pub const PNG_FORMAT_BGR: ::std::os::raw::c_uchar = 18;
pub const PNG_FORMAT_RGBA: ::std::os::raw::c_uchar = 3;
pub const PNG_FORMAT_ARGB: ::std::os::raw::c_uchar = 35;
pub const PNG_FORMAT_BGRA: ::std::os::raw::c_uchar = 19;
pub const PNG_FORMAT_ABGR: ::std::os::raw::c_uchar = 51;
pub const PNG_FORMAT_LINEAR_Y: ::std::os::raw::c_uchar = 4;
pub const PNG_FORMAT_LINEAR_Y_ALPHA: ::std::os::raw::c_uchar = 5;
pub const PNG_FORMAT_LINEAR_RGB: ::std::os::raw::c_uchar = 6;
pub const PNG_FORMAT_LINEAR_RGB_ALPHA: ::std::os::raw::c_uchar = 7;
pub const PNG_FORMAT_RGB_COLORMAP: ::std::os::raw::c_uchar = 10;
pub const PNG_FORMAT_BGR_COLORMAP: ::std::os::raw::c_uchar = 26;
pub const PNG_FORMAT_RGBA_COLORMAP: ::std::os::raw::c_uchar = 11;
pub const PNG_FORMAT_ARGB_COLORMAP: ::std::os::raw::c_uchar = 43;
pub const PNG_FORMAT_BGRA_COLORMAP: ::std::os::raw::c_uchar = 27;
pub const PNG_FORMAT_ABGR_COLORMAP: ::std::os::raw::c_uchar = 59;
pub const PNG_IMAGE_FLAG_COLORSPACE_NOT_sRGB: ::std::os::raw::c_uchar = 1;
pub const PNG_IMAGE_FLAG_FAST: ::std::os::raw::c_uchar = 2;
pub const PNG_IMAGE_FLAG_16BIT_sRGB: ::std::os::raw::c_uchar = 4;
pub const PNG_MAXIMUM_INFLATE_WINDOW: ::std::os::raw::c_uchar = 2;
pub const PNG_SKIP_sRGB_CHECK_PROFILE: ::std::os::raw::c_uchar = 4;
pub const PNG_OPTION_NEXT: ::std::os::raw::c_uchar = 6;
pub const PNG_OPTION_UNSET: ::std::os::raw::c_uchar = 0;
pub const PNG_OPTION_INVALID: ::std::os::raw::c_uchar = 1;
pub const PNG_OPTION_OFF: ::std::os::raw::c_uchar = 2;
pub const PNG_OPTION_ON: ::std::os::raw::c_uchar = 3;
pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct __mbstate_t {
    pub _bindgen_data_: [u64; 16usize],
}
impl __mbstate_t {
    pub unsafe fn __mbstate8(&mut self)
     -> *mut [::std::os::raw::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
impl ::std::default::Default for __darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for _opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
impl ::std::clone::Clone for _opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for _opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_once_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
impl ::std::clone::Clone for _opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
impl ::std::default::Default for _opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
impl ::std::clone::Clone for _opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type va_list = __darwin_va_list;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
impl ::std::default::Default for __sbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum __sFILEX { }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void)
                                          -> ::std::os::raw::c_int>,
    pub _read: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2:
                                                              *mut ::std::os::raw::c_char,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
    pub _seek: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2: fpos_t,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void,
                                                           arg2:
                                                               *const ::std::os::raw::c_char,
                                                           arg3:
                                                               ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
impl ::std::default::Default for __sFILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = __sFILE;
pub type off_t = __darwin_off_t;
pub type ssize_t = isize;
pub type jmp_buf = [::std::os::raw::c_int; 37usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 38usize];
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum clockid_t {
    _CLOCK_REALTIME = 0,
    _CLOCK_MONOTONIC = 6,
    _CLOCK_MONOTONIC_RAW = 4,
    _CLOCK_MONOTONIC_RAW_APPROX = 5,
    _CLOCK_UPTIME_RAW = 8,
    _CLOCK_UPTIME_RAW_APPROX = 9,
    _CLOCK_PROCESS_CPUTIME_ID = 12,
    _CLOCK_THREAD_CPUTIME_ID = 16,
}
pub type png_byte = ::std::os::raw::c_uchar;
pub type png_int_16 = ::std::os::raw::c_short;
pub type png_uint_16 = ::std::os::raw::c_ushort;
pub type png_int_32 = ::std::os::raw::c_int;
pub type png_uint_32 = ::std::os::raw::c_uint;
pub type png_size_t = size_t;
pub type png_ptrdiff_t = ptrdiff_t;
pub type png_alloc_size_t = png_size_t;
pub type png_fixed_point = png_int_32;
pub type png_voidp = *mut ::std::os::raw::c_void;
pub type png_const_voidp = *const ::std::os::raw::c_void;
pub type png_bytep = *mut png_byte;
pub type png_const_bytep = *const png_byte;
pub type png_uint_32p = *mut png_uint_32;
pub type png_const_uint_32p = *const png_uint_32;
pub type png_int_32p = *mut png_int_32;
pub type png_const_int_32p = *const png_int_32;
pub type png_uint_16p = *mut png_uint_16;
pub type png_const_uint_16p = *const png_uint_16;
pub type png_int_16p = *mut png_int_16;
pub type png_const_int_16p = *const png_int_16;
pub type png_charp = *mut ::std::os::raw::c_char;
pub type png_const_charp = *const ::std::os::raw::c_char;
pub type png_fixed_point_p = *mut png_fixed_point;
pub type png_const_fixed_point_p = *const png_fixed_point;
pub type png_size_tp = *mut png_size_t;
pub type png_const_size_tp = *const png_size_t;
pub type png_FILE_p = *mut FILE;
pub type png_doublep = *mut f64;
pub type png_const_doublep = *const f64;
pub type png_bytepp = *mut *mut png_byte;
pub type png_uint_32pp = *mut *mut png_uint_32;
pub type png_int_32pp = *mut *mut png_int_32;
pub type png_uint_16pp = *mut *mut png_uint_16;
pub type png_int_16pp = *mut *mut png_int_16;
pub type png_const_charpp = *mut *const ::std::os::raw::c_char;
pub type png_charpp = *mut *mut ::std::os::raw::c_char;
pub type png_fixed_point_pp = *mut *mut png_fixed_point;
pub type png_doublepp = *mut *mut f64;
pub type png_charppp = *mut *mut *mut ::std::os::raw::c_char;
pub type png_libpng_version_1_6_23 = *mut ::std::os::raw::c_char;
pub enum png_struct_def { }
pub type png_struct = png_struct_def;
pub type png_const_structp = *const png_struct;
pub type png_structp = *mut png_struct;
pub type png_structpp = *mut *mut png_struct;
pub enum png_info_def { }
pub type png_info = png_info_def;
pub type png_infop = *mut png_info;
pub type png_const_infop = *const png_info;
pub type png_infopp = *mut *mut png_info;
pub type png_structrp = *mut png_struct;
pub type png_const_structrp = *const png_struct;
pub type png_inforp = *mut png_info;
pub type png_const_inforp = *const png_info;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct png_color_struct {
    pub red: png_byte,
    pub green: png_byte,
    pub blue: png_byte,
}
impl ::std::default::Default for png_color_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type png_color = png_color_struct;
pub type png_colorp = *mut png_color;
pub type png_const_colorp = *const png_color;
pub type png_colorpp = *mut *mut png_color;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct png_color_16_struct {
    pub index: png_byte,
    pub red: png_uint_16,
    pub green: png_uint_16,
    pub blue: png_uint_16,
    pub gray: png_uint_16,
}
impl ::std::default::Default for png_color_16_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type png_color_16 = png_color_16_struct;
pub type png_color_16p = *mut png_color_16;
pub type png_const_color_16p = *const png_color_16;
pub type png_color_16pp = *mut *mut png_color_16;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct png_color_8_struct {
    pub red: png_byte,
    pub green: png_byte,
    pub blue: png_byte,
    pub gray: png_byte,
    pub alpha: png_byte,
}
impl ::std::default::Default for png_color_8_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type png_color_8 = png_color_8_struct;
pub type png_color_8p = *mut png_color_8;
pub type png_const_color_8p = *const png_color_8;
pub type png_color_8pp = *mut *mut png_color_8;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct png_sPLT_entry_struct {
    pub red: png_uint_16,
    pub green: png_uint_16,
    pub blue: png_uint_16,
    pub alpha: png_uint_16,
    pub frequency: png_uint_16,
}
impl ::std::default::Default for png_sPLT_entry_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type png_sPLT_entry = png_sPLT_entry_struct;
pub type png_sPLT_entryp = *mut png_sPLT_entry;
pub type png_const_sPLT_entryp = *const png_sPLT_entry;
pub type png_sPLT_entrypp = *mut *mut png_sPLT_entry;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct png_sPLT_struct {
    pub name: png_charp,
    pub depth: png_byte,
    pub entries: png_sPLT_entryp,
    pub nentries: png_int_32,
}
impl ::std::default::Default for png_sPLT_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type png_sPLT_t = png_sPLT_struct;
pub type png_sPLT_tp = *mut png_sPLT_t;
pub type png_const_sPLT_tp = *const png_sPLT_t;
pub type png_sPLT_tpp = *mut *mut png_sPLT_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct png_text_struct {
    pub compression: ::std::os::raw::c_int,
    pub key: png_charp,
    pub text: png_charp,
    pub text_length: png_size_t,
    pub itxt_length: png_size_t,
    pub lang: png_charp,
    pub lang_key: png_charp,
}
impl ::std::default::Default for png_text_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type png_text = png_text_struct;
pub type png_textp = *mut png_text;
pub type png_const_textp = *const png_text;
pub type png_textpp = *mut *mut png_text;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct png_time_struct {
    pub year: png_uint_16,
    pub month: png_byte,
    pub day: png_byte,
    pub hour: png_byte,
    pub minute: png_byte,
    pub second: png_byte,
}
impl ::std::default::Default for png_time_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type png_time = png_time_struct;
pub type png_timep = *mut png_time;
pub type png_const_timep = *const png_time;
pub type png_timepp = *mut *mut png_time;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct png_unknown_chunk_t {
    pub name: [png_byte; 5usize],
    pub data: *mut png_byte,
    pub size: png_size_t,
    pub location: png_byte,
}
impl ::std::default::Default for png_unknown_chunk_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type png_unknown_chunk = png_unknown_chunk_t;
pub type png_unknown_chunkp = *mut png_unknown_chunk;
pub type png_const_unknown_chunkp = *const png_unknown_chunk;
pub type png_unknown_chunkpp = *mut *mut png_unknown_chunk;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct png_row_info_struct {
    pub width: png_uint_32,
    pub rowbytes: png_size_t,
    pub color_type: png_byte,
    pub bit_depth: png_byte,
    pub channels: png_byte,
    pub pixel_depth: png_byte,
}
impl ::std::default::Default for png_row_info_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type png_row_info = png_row_info_struct;
pub type png_row_infop = *mut png_row_info;
pub type png_row_infopp = *mut *mut png_row_info;
pub type png_error_ptr =
    ::std::option::Option<extern "C" fn(arg1: png_structp,
                                        arg2: png_const_charp)>;
pub type png_rw_ptr =
    ::std::option::Option<extern "C" fn(arg1: png_structp, arg2: png_bytep,
                                        arg3: png_size_t)>;
pub type png_flush_ptr =
    ::std::option::Option<extern "C" fn(arg1: png_structp)>;
pub type png_read_status_ptr =
    ::std::option::Option<extern "C" fn(arg1: png_structp, arg2: png_uint_32,
                                        arg3: ::std::os::raw::c_int)>;
pub type png_write_status_ptr =
    ::std::option::Option<extern "C" fn(arg1: png_structp, arg2: png_uint_32,
                                        arg3: ::std::os::raw::c_int)>;
pub type png_progressive_info_ptr =
    ::std::option::Option<extern "C" fn(arg1: png_structp, arg2: png_infop)>;
pub type png_progressive_end_ptr =
    ::std::option::Option<extern "C" fn(arg1: png_structp, arg2: png_infop)>;
pub type png_progressive_row_ptr =
    ::std::option::Option<extern "C" fn(arg1: png_structp, arg2: png_bytep,
                                        arg3: png_uint_32,
                                        arg4: ::std::os::raw::c_int)>;
pub type png_user_transform_ptr =
    ::std::option::Option<extern "C" fn(arg1: png_structp,
                                        arg2: png_row_infop,
                                        arg3: png_bytep)>;
pub type png_user_chunk_ptr =
    ::std::option::Option<extern "C" fn(arg1: png_structp,
                                        arg2: png_unknown_chunkp)
                              -> ::std::os::raw::c_int>;
pub type png_longjmp_ptr =
    ::std::option::Option<extern "C" fn(arg1: jmp_buf,
                                        arg2: ::std::os::raw::c_int)>;
pub type png_malloc_ptr =
    ::std::option::Option<extern "C" fn(arg1: png_structp,
                                        arg2: png_alloc_size_t) -> png_voidp>;
pub type png_free_ptr =
    ::std::option::Option<extern "C" fn(arg1: png_structp, arg2: png_voidp)>;
pub enum png_control { }
pub type png_controlp = *mut png_control;
#[repr(C)]
#[derive(Copy)]
pub struct png_image {
    pub opaque: png_controlp,
    pub version: png_uint_32,
    pub width: png_uint_32,
    pub height: png_uint_32,
    pub format: png_uint_32,
    pub flags: png_uint_32,
    pub colormap_entries: png_uint_32,
    pub warning_or_error: png_uint_32,
    pub message: [::std::os::raw::c_char; 64usize],
}
impl ::std::clone::Clone for png_image {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for png_image {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type png_imagep = *mut png_image;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "png", kind = "dylib")]
extern "C" {
    pub static mut __stdinp: *mut FILE;
    pub static mut __stdoutp: *mut FILE;
    pub static mut __stderrp: *mut FILE;
    pub static sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
    pub static mut getdate_err: ::std::os::raw::c_int;
    pub static mut timezone: ::std::os::raw::c_long;
    pub static mut daylight: ::std::os::raw::c_int;
}
#[link(name = "png", kind = "dylib")]
extern "C" {
    pub fn renameat(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renamex_np(arg1: *const ::std::os::raw::c_char,
                      arg2: *const ::std::os::raw::c_char,
                      arg3: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn renameatx_np(arg1: ::std::os::raw::c_int,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: ::std::os::raw::c_int,
                        arg4: *const ::std::os::raw::c_char,
                        arg5: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn clearerr(arg1: *mut FILE);
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fgets(arg1: *mut ::std::os::raw::c_char,
                 arg2: ::std::os::raw::c_int, arg3: *mut FILE)
     -> *mut ::std::os::raw::c_char;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __mode: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __nitems: size_t, __stream: *mut FILE) -> size_t;
    pub fn freopen(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: *mut FILE)
     -> *mut FILE;
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fseek(arg1: *mut FILE, arg2: ::std::os::raw::c_long,
                 arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __nitems: size_t, __stream: *mut FILE) -> size_t;
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn gets(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn perror(arg1: *const ::std::os::raw::c_char);
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn remove(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rewind(arg1: *mut FILE);
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int, arg4: size_t)
     -> ::std::os::raw::c_int;
    pub fn sprintf(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                    arg3: va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(arg1: *const ::std::os::raw::c_char, arg2: va_list)
     -> ::std::os::raw::c_int;
    pub fn vsprintf(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, arg3: va_list)
     -> ::std::os::raw::c_int;
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fdopen(arg1: ::std::os::raw::c_int,
                  arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn __svfscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                      arg3: va_list) -> ::std::os::raw::c_int;
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn __sputc(_c: ::std::os::raw::c_int, _p: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn flockfile(arg1: *mut FILE);
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(arg1: *mut FILE);
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __prefix: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fseeko(__stream: *mut FILE, __offset: off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> off_t;
    pub fn snprintf(__str: *mut ::std::os::raw::c_char, __size: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, arg1: va_list)
     -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char, arg1: va_list)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__str: *mut ::std::os::raw::c_char, __size: size_t,
                     __format: *const ::std::os::raw::c_char, arg1: va_list)
     -> ::std::os::raw::c_int;
    pub fn vsscanf(__str: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, arg1: va_list)
     -> ::std::os::raw::c_int;
    pub fn dprintf(arg1: ::std::os::raw::c_int,
                   arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vdprintf(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char, arg3: va_list)
     -> ::std::os::raw::c_int;
    pub fn getdelim(__linep: *mut *mut ::std::os::raw::c_char,
                    __linecapp: *mut size_t,
                    __delimiter: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ssize_t;
    pub fn getline(__linep: *mut *mut ::std::os::raw::c_char,
                   __linecapp: *mut size_t, __stream: *mut FILE) -> ssize_t;
    pub fn asprintf(arg1: *mut *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn fmtcheck(arg1: *const ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int);
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn vasprintf(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *const ::std::os::raw::c_char, arg3: va_list)
     -> ::std::os::raw::c_int;
    pub fn zopen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char,
                 arg3: ::std::os::raw::c_int) -> *mut FILE;
    pub fn funopen(arg1: *const ::std::os::raw::c_void,
                   arg2:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *mut ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg3:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg4:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      fpos_t,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut FILE;
    pub fn __sprintf_chk(arg1: *mut ::std::os::raw::c_char,
                         arg2: ::std::os::raw::c_int, arg3: size_t,
                         arg4: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn __snprintf_chk(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                          arg3: ::std::os::raw::c_int, arg4: size_t,
                          arg5: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn __vsprintf_chk(arg1: *mut ::std::os::raw::c_char,
                          arg2: ::std::os::raw::c_int, arg3: size_t,
                          arg4: *const ::std::os::raw::c_char, arg5: va_list)
     -> ::std::os::raw::c_int;
    pub fn __vsnprintf_chk(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                           arg3: ::std::os::raw::c_int, arg4: size_t,
                           arg5: *const ::std::os::raw::c_char, arg6: va_list)
     -> ::std::os::raw::c_int;
    pub fn setjmp(arg1: jmp_buf) -> ::std::os::raw::c_int;
    pub fn longjmp(arg1: jmp_buf, arg2: ::std::os::raw::c_int);
    pub fn _setjmp(arg1: jmp_buf) -> ::std::os::raw::c_int;
    pub fn _longjmp(arg1: jmp_buf, arg2: ::std::os::raw::c_int);
    pub fn sigsetjmp(arg1: sigjmp_buf, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn siglongjmp(arg1: sigjmp_buf, arg2: ::std::os::raw::c_int);
    pub fn longjmperror();
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
    pub fn clock() -> clock_t;
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
    pub fn localtime(arg1: *const time_t) -> *mut tm;
    pub fn mktime(arg1: *mut tm) -> time_t;
    pub fn strftime(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                    arg3: *const ::std::os::raw::c_char, arg4: *const tm)
     -> size_t;
    pub fn strptime(arg1: *const ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, arg3: *mut tm)
     -> *mut ::std::os::raw::c_char;
    pub fn time(arg1: *mut time_t) -> time_t;
    pub fn tzset();
    pub fn asctime_r(arg1: *const tm, arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ctime_r(arg1: *const time_t, arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
    pub fn posix2time(arg1: time_t) -> time_t;
    pub fn tzsetwall();
    pub fn time2posix(arg1: time_t) -> time_t;
    pub fn timelocal(arg1: *mut tm) -> time_t;
    pub fn timegm(arg1: *mut tm) -> time_t;
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec)
     -> ::std::os::raw::c_int;
    pub fn png_access_version_number() -> png_uint_32;
    pub fn png_set_sig_bytes(png_ptr: png_structrp,
                             num_bytes: ::std::os::raw::c_int);
    pub fn png_sig_cmp(sig: png_const_bytep, start: png_size_t,
                       num_to_check: png_size_t) -> ::std::os::raw::c_int;
    pub fn png_create_read_struct(user_png_ver: png_const_charp,
                                  error_ptr: png_voidp,
                                  error_fn: png_error_ptr,
                                  warn_fn: png_error_ptr) -> png_structp;
    pub fn png_create_write_struct(user_png_ver: png_const_charp,
                                   error_ptr: png_voidp,
                                   error_fn: png_error_ptr,
                                   warn_fn: png_error_ptr) -> png_structp;
    pub fn png_get_compression_buffer_size(png_ptr: png_const_structrp)
     -> png_size_t;
    pub fn png_set_compression_buffer_size(png_ptr: png_structrp,
                                           size: png_size_t);
    pub fn png_set_longjmp_fn(png_ptr: png_structrp,
                              longjmp_fn: png_longjmp_ptr,
                              jmp_buf_size: size_t) -> *mut jmp_buf;
    pub fn png_longjmp(png_ptr: png_const_structrp,
                       val: ::std::os::raw::c_int);
    pub fn png_reset_zstream(png_ptr: png_structrp) -> ::std::os::raw::c_int;
    pub fn png_create_read_struct_2(user_png_ver: png_const_charp,
                                    error_ptr: png_voidp,
                                    error_fn: png_error_ptr,
                                    warn_fn: png_error_ptr,
                                    mem_ptr: png_voidp,
                                    malloc_fn: png_malloc_ptr,
                                    free_fn: png_free_ptr) -> png_structp;
    pub fn png_create_write_struct_2(user_png_ver: png_const_charp,
                                     error_ptr: png_voidp,
                                     error_fn: png_error_ptr,
                                     warn_fn: png_error_ptr,
                                     mem_ptr: png_voidp,
                                     malloc_fn: png_malloc_ptr,
                                     free_fn: png_free_ptr) -> png_structp;
    pub fn png_write_sig(png_ptr: png_structrp);
    pub fn png_write_chunk(png_ptr: png_structrp, chunk_name: png_const_bytep,
                           data: png_const_bytep, length: png_size_t);
    pub fn png_write_chunk_start(png_ptr: png_structrp,
                                 chunk_name: png_const_bytep,
                                 length: png_uint_32);
    pub fn png_write_chunk_data(png_ptr: png_structrp, data: png_const_bytep,
                                length: png_size_t);
    pub fn png_write_chunk_end(png_ptr: png_structrp);
    pub fn png_create_info_struct(png_ptr: png_const_structrp) -> png_infop;
    pub fn png_info_init_3(info_ptr: png_infopp,
                           png_info_struct_size: png_size_t);
    pub fn png_write_info_before_PLTE(png_ptr: png_structrp,
                                      info_ptr: png_const_inforp);
    pub fn png_write_info(png_ptr: png_structrp, info_ptr: png_const_inforp);
    pub fn png_read_info(png_ptr: png_structrp, info_ptr: png_inforp);
    pub fn png_convert_to_rfc1123(png_ptr: png_structrp,
                                  ptime: png_const_timep) -> png_const_charp;
    pub fn png_convert_to_rfc1123_buffer(out: *mut ::std::os::raw::c_char,
                                         ptime: png_const_timep)
     -> ::std::os::raw::c_int;
    pub fn png_convert_from_struct_tm(ptime: png_timep, ttime: *const tm);
    pub fn png_convert_from_time_t(ptime: png_timep, ttime: time_t);
    pub fn png_set_expand(png_ptr: png_structrp);
    pub fn png_set_expand_gray_1_2_4_to_8(png_ptr: png_structrp);
    pub fn png_set_palette_to_rgb(png_ptr: png_structrp);
    pub fn png_set_tRNS_to_alpha(png_ptr: png_structrp);
    pub fn png_set_expand_16(png_ptr: png_structrp);
    pub fn png_set_bgr(png_ptr: png_structrp);
    pub fn png_set_gray_to_rgb(png_ptr: png_structrp);
    pub fn png_set_rgb_to_gray(png_ptr: png_structrp,
                               error_action: ::std::os::raw::c_int, red: f64,
                               green: f64);
    pub fn png_set_rgb_to_gray_fixed(png_ptr: png_structrp,
                                     error_action: ::std::os::raw::c_int,
                                     red: png_fixed_point,
                                     green: png_fixed_point);
    pub fn png_get_rgb_to_gray_status(png_ptr: png_const_structrp)
     -> png_byte;
    pub fn png_build_grayscale_palette(bit_depth: ::std::os::raw::c_int,
                                       palette: png_colorp);
    pub fn png_set_alpha_mode(png_ptr: png_structrp,
                              mode: ::std::os::raw::c_int, output_gamma: f64);
    pub fn png_set_alpha_mode_fixed(png_ptr: png_structrp,
                                    mode: ::std::os::raw::c_int,
                                    output_gamma: png_fixed_point);
    pub fn png_set_strip_alpha(png_ptr: png_structrp);
    pub fn png_set_swap_alpha(png_ptr: png_structrp);
    pub fn png_set_invert_alpha(png_ptr: png_structrp);
    pub fn png_set_filler(png_ptr: png_structrp, filler: png_uint_32,
                          flags: ::std::os::raw::c_int);
    pub fn png_set_add_alpha(png_ptr: png_structrp, filler: png_uint_32,
                             flags: ::std::os::raw::c_int);
    pub fn png_set_swap(png_ptr: png_structrp);
    pub fn png_set_packing(png_ptr: png_structrp);
    pub fn png_set_packswap(png_ptr: png_structrp);
    pub fn png_set_shift(png_ptr: png_structrp,
                         true_bits: png_const_color_8p);
    pub fn png_set_interlace_handling(png_ptr: png_structrp)
     -> ::std::os::raw::c_int;
    pub fn png_set_invert_mono(png_ptr: png_structrp);
    pub fn png_set_background(png_ptr: png_structrp,
                              background_color: png_const_color_16p,
                              background_gamma_code: ::std::os::raw::c_int,
                              need_expand: ::std::os::raw::c_int,
                              background_gamma: f64);
    pub fn png_set_background_fixed(png_ptr: png_structrp,
                                    background_color: png_const_color_16p,
                                    background_gamma_code:
                                        ::std::os::raw::c_int,
                                    need_expand: ::std::os::raw::c_int,
                                    background_gamma: png_fixed_point);
    pub fn png_set_scale_16(png_ptr: png_structrp);
    pub fn png_set_strip_16(png_ptr: png_structrp);
    pub fn png_set_quantize(png_ptr: png_structrp, palette: png_colorp,
                            num_palette: ::std::os::raw::c_int,
                            maximum_colors: ::std::os::raw::c_int,
                            histogram: png_const_uint_16p,
                            full_quantize: ::std::os::raw::c_int);
    pub fn png_set_gamma(png_ptr: png_structrp, screen_gamma: f64,
                         override_file_gamma: f64);
    pub fn png_set_gamma_fixed(png_ptr: png_structrp,
                               screen_gamma: png_fixed_point,
                               override_file_gamma: png_fixed_point);
    pub fn png_set_flush(png_ptr: png_structrp, nrows: ::std::os::raw::c_int);
    pub fn png_write_flush(png_ptr: png_structrp);
    pub fn png_start_read_image(png_ptr: png_structrp);
    pub fn png_read_update_info(png_ptr: png_structrp, info_ptr: png_inforp);
    pub fn png_read_rows(png_ptr: png_structrp, row: png_bytepp,
                         display_row: png_bytepp, num_rows: png_uint_32);
    pub fn png_read_row(png_ptr: png_structrp, row: png_bytep,
                        display_row: png_bytep);
    pub fn png_read_image(png_ptr: png_structrp, image: png_bytepp);
    pub fn png_write_row(png_ptr: png_structrp, row: png_const_bytep);
    pub fn png_write_rows(png_ptr: png_structrp, row: png_bytepp,
                          num_rows: png_uint_32);
    pub fn png_write_image(png_ptr: png_structrp, image: png_bytepp);
    pub fn png_write_end(png_ptr: png_structrp, info_ptr: png_inforp);
    pub fn png_read_end(png_ptr: png_structrp, info_ptr: png_inforp);
    pub fn png_destroy_info_struct(png_ptr: png_const_structrp,
                                   info_ptr_ptr: png_infopp);
    pub fn png_destroy_read_struct(png_ptr_ptr: png_structpp,
                                   info_ptr_ptr: png_infopp,
                                   end_info_ptr_ptr: png_infopp);
    pub fn png_destroy_write_struct(png_ptr_ptr: png_structpp,
                                    info_ptr_ptr: png_infopp);
    pub fn png_set_crc_action(png_ptr: png_structrp,
                              crit_action: ::std::os::raw::c_int,
                              ancil_action: ::std::os::raw::c_int);
    pub fn png_set_filter(png_ptr: png_structrp,
                          method: ::std::os::raw::c_int,
                          filters: ::std::os::raw::c_int);
    pub fn png_set_filter_heuristics(png_ptr: png_structrp,
                                     heuristic_method: ::std::os::raw::c_int,
                                     num_weights: ::std::os::raw::c_int,
                                     filter_weights: png_const_doublep,
                                     filter_costs: png_const_doublep);
    pub fn png_set_filter_heuristics_fixed(png_ptr: png_structrp,
                                           heuristic_method:
                                               ::std::os::raw::c_int,
                                           num_weights: ::std::os::raw::c_int,
                                           filter_weights:
                                               png_const_fixed_point_p,
                                           filter_costs:
                                               png_const_fixed_point_p);
    pub fn png_set_compression_level(png_ptr: png_structrp,
                                     level: ::std::os::raw::c_int);
    pub fn png_set_compression_mem_level(png_ptr: png_structrp,
                                         mem_level: ::std::os::raw::c_int);
    pub fn png_set_compression_strategy(png_ptr: png_structrp,
                                        strategy: ::std::os::raw::c_int);
    pub fn png_set_compression_window_bits(png_ptr: png_structrp,
                                           window_bits:
                                               ::std::os::raw::c_int);
    pub fn png_set_compression_method(png_ptr: png_structrp,
                                      method: ::std::os::raw::c_int);
    pub fn png_set_text_compression_level(png_ptr: png_structrp,
                                          level: ::std::os::raw::c_int);
    pub fn png_set_text_compression_mem_level(png_ptr: png_structrp,
                                              mem_level:
                                                  ::std::os::raw::c_int);
    pub fn png_set_text_compression_strategy(png_ptr: png_structrp,
                                             strategy: ::std::os::raw::c_int);
    pub fn png_set_text_compression_window_bits(png_ptr: png_structrp,
                                                window_bits:
                                                    ::std::os::raw::c_int);
    pub fn png_set_text_compression_method(png_ptr: png_structrp,
                                           method: ::std::os::raw::c_int);
    pub fn png_init_io(png_ptr: png_structrp, fp: png_FILE_p);
    pub fn png_set_error_fn(png_ptr: png_structrp, error_ptr: png_voidp,
                            error_fn: png_error_ptr,
                            warning_fn: png_error_ptr);
    pub fn png_get_error_ptr(png_ptr: png_const_structrp) -> png_voidp;
    pub fn png_set_write_fn(png_ptr: png_structrp, io_ptr: png_voidp,
                            write_data_fn: png_rw_ptr,
                            output_flush_fn: png_flush_ptr);
    pub fn png_set_read_fn(png_ptr: png_structrp, io_ptr: png_voidp,
                           read_data_fn: png_rw_ptr);
    pub fn png_get_io_ptr(png_ptr: png_const_structrp) -> png_voidp;
    pub fn png_set_read_status_fn(png_ptr: png_structrp,
                                  read_row_fn: png_read_status_ptr);
    pub fn png_set_write_status_fn(png_ptr: png_structrp,
                                   write_row_fn: png_write_status_ptr);
    pub fn png_set_mem_fn(png_ptr: png_structrp, mem_ptr: png_voidp,
                          malloc_fn: png_malloc_ptr, free_fn: png_free_ptr);
    pub fn png_get_mem_ptr(png_ptr: png_const_structrp) -> png_voidp;
    pub fn png_set_read_user_transform_fn(png_ptr: png_structrp,
                                          read_user_transform_fn:
                                              png_user_transform_ptr);
    pub fn png_set_write_user_transform_fn(png_ptr: png_structrp,
                                           write_user_transform_fn:
                                               png_user_transform_ptr);
    pub fn png_set_user_transform_info(png_ptr: png_structrp,
                                       user_transform_ptr: png_voidp,
                                       user_transform_depth:
                                           ::std::os::raw::c_int,
                                       user_transform_channels:
                                           ::std::os::raw::c_int);
    pub fn png_get_user_transform_ptr(png_ptr: png_const_structrp)
     -> png_voidp;
    pub fn png_get_current_row_number(arg1: png_const_structrp)
     -> png_uint_32;
    pub fn png_get_current_pass_number(arg1: png_const_structrp) -> png_byte;
    pub fn png_set_read_user_chunk_fn(png_ptr: png_structrp,
                                      user_chunk_ptr: png_voidp,
                                      read_user_chunk_fn: png_user_chunk_ptr);
    pub fn png_get_user_chunk_ptr(png_ptr: png_const_structrp) -> png_voidp;
    pub fn png_set_progressive_read_fn(png_ptr: png_structrp,
                                       progressive_ptr: png_voidp,
                                       info_fn: png_progressive_info_ptr,
                                       row_fn: png_progressive_row_ptr,
                                       end_fn: png_progressive_end_ptr);
    pub fn png_get_progressive_ptr(png_ptr: png_const_structrp) -> png_voidp;
    pub fn png_process_data(png_ptr: png_structrp, info_ptr: png_inforp,
                            buffer: png_bytep, buffer_size: png_size_t);
    pub fn png_process_data_pause(arg1: png_structrp,
                                  save: ::std::os::raw::c_int) -> png_size_t;
    pub fn png_process_data_skip(arg1: png_structrp) -> png_uint_32;
    pub fn png_progressive_combine_row(png_ptr: png_const_structrp,
                                       old_row: png_bytep,
                                       new_row: png_const_bytep);
    pub fn png_malloc(png_ptr: png_const_structrp, size: png_alloc_size_t)
     -> png_voidp;
    pub fn png_calloc(png_ptr: png_const_structrp, size: png_alloc_size_t)
     -> png_voidp;
    pub fn png_malloc_warn(png_ptr: png_const_structrp,
                           size: png_alloc_size_t) -> png_voidp;
    pub fn png_free(png_ptr: png_const_structrp, ptr: png_voidp);
    pub fn png_free_data(png_ptr: png_const_structrp, info_ptr: png_inforp,
                         free_me: png_uint_32, num: ::std::os::raw::c_int);
    pub fn png_data_freer(png_ptr: png_const_structrp, info_ptr: png_inforp,
                          freer: ::std::os::raw::c_int, mask: png_uint_32);
    pub fn png_malloc_default(png_ptr: png_const_structrp,
                              size: png_alloc_size_t) -> png_voidp;
    pub fn png_free_default(png_ptr: png_const_structrp, ptr: png_voidp);
    pub fn png_error(png_ptr: png_const_structrp,
                     error_message: png_const_charp);
    pub fn png_chunk_error(png_ptr: png_const_structrp,
                           error_message: png_const_charp);
    pub fn png_warning(png_ptr: png_const_structrp,
                       warning_message: png_const_charp);
    pub fn png_chunk_warning(png_ptr: png_const_structrp,
                             warning_message: png_const_charp);
    pub fn png_benign_error(png_ptr: png_const_structrp,
                            warning_message: png_const_charp);
    pub fn png_chunk_benign_error(png_ptr: png_const_structrp,
                                  warning_message: png_const_charp);
    pub fn png_set_benign_errors(png_ptr: png_structrp,
                                 allowed: ::std::os::raw::c_int);
    pub fn png_get_valid(png_ptr: png_const_structrp,
                         info_ptr: png_const_inforp, flag: png_uint_32)
     -> png_uint_32;
    pub fn png_get_rowbytes(png_ptr: png_const_structrp,
                            info_ptr: png_const_inforp) -> png_size_t;
    pub fn png_get_rows(png_ptr: png_const_structrp,
                        info_ptr: png_const_inforp) -> png_bytepp;
    pub fn png_set_rows(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        row_pointers: png_bytepp);
    pub fn png_get_channels(png_ptr: png_const_structrp,
                            info_ptr: png_const_inforp) -> png_byte;
    pub fn png_get_image_width(png_ptr: png_const_structrp,
                               info_ptr: png_const_inforp) -> png_uint_32;
    pub fn png_get_image_height(png_ptr: png_const_structrp,
                                info_ptr: png_const_inforp) -> png_uint_32;
    pub fn png_get_bit_depth(png_ptr: png_const_structrp,
                             info_ptr: png_const_inforp) -> png_byte;
    pub fn png_get_color_type(png_ptr: png_const_structrp,
                              info_ptr: png_const_inforp) -> png_byte;
    pub fn png_get_filter_type(png_ptr: png_const_structrp,
                               info_ptr: png_const_inforp) -> png_byte;
    pub fn png_get_interlace_type(png_ptr: png_const_structrp,
                                  info_ptr: png_const_inforp) -> png_byte;
    pub fn png_get_compression_type(png_ptr: png_const_structrp,
                                    info_ptr: png_const_inforp) -> png_byte;
    pub fn png_get_pixels_per_meter(png_ptr: png_const_structrp,
                                    info_ptr: png_const_inforp)
     -> png_uint_32;
    pub fn png_get_x_pixels_per_meter(png_ptr: png_const_structrp,
                                      info_ptr: png_const_inforp)
     -> png_uint_32;
    pub fn png_get_y_pixels_per_meter(png_ptr: png_const_structrp,
                                      info_ptr: png_const_inforp)
     -> png_uint_32;
    pub fn png_get_pixel_aspect_ratio(png_ptr: png_const_structrp,
                                      info_ptr: png_const_inforp) -> f32;
    pub fn png_get_pixel_aspect_ratio_fixed(png_ptr: png_const_structrp,
                                            info_ptr: png_const_inforp)
     -> png_fixed_point;
    pub fn png_get_x_offset_pixels(png_ptr: png_const_structrp,
                                   info_ptr: png_const_inforp) -> png_int_32;
    pub fn png_get_y_offset_pixels(png_ptr: png_const_structrp,
                                   info_ptr: png_const_inforp) -> png_int_32;
    pub fn png_get_x_offset_microns(png_ptr: png_const_structrp,
                                    info_ptr: png_const_inforp) -> png_int_32;
    pub fn png_get_y_offset_microns(png_ptr: png_const_structrp,
                                    info_ptr: png_const_inforp) -> png_int_32;
    pub fn png_get_signature(png_ptr: png_const_structrp,
                             info_ptr: png_const_inforp) -> png_const_bytep;
    pub fn png_get_bKGD(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        background: *mut png_color_16p) -> png_uint_32;
    pub fn png_set_bKGD(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        background: png_const_color_16p);
    pub fn png_get_cHRM(png_ptr: png_const_structrp,
                        info_ptr: png_const_inforp, white_x: *mut f64,
                        white_y: *mut f64, red_x: *mut f64, red_y: *mut f64,
                        green_x: *mut f64, green_y: *mut f64,
                        blue_x: *mut f64, blue_y: *mut f64) -> png_uint_32;
    pub fn png_get_cHRM_XYZ(png_ptr: png_const_structrp,
                            info_ptr: png_const_inforp, red_X: *mut f64,
                            red_Y: *mut f64, red_Z: *mut f64,
                            green_X: *mut f64, green_Y: *mut f64,
                            green_Z: *mut f64, blue_X: *mut f64,
                            blue_Y: *mut f64, blue_Z: *mut f64)
     -> png_uint_32;
    pub fn png_get_cHRM_fixed(png_ptr: png_const_structrp,
                              info_ptr: png_const_inforp,
                              int_white_x: *mut png_fixed_point,
                              int_white_y: *mut png_fixed_point,
                              int_red_x: *mut png_fixed_point,
                              int_red_y: *mut png_fixed_point,
                              int_green_x: *mut png_fixed_point,
                              int_green_y: *mut png_fixed_point,
                              int_blue_x: *mut png_fixed_point,
                              int_blue_y: *mut png_fixed_point)
     -> png_uint_32;
    pub fn png_get_cHRM_XYZ_fixed(png_ptr: png_const_structrp,
                                  info_ptr: png_const_inforp,
                                  int_red_X: *mut png_fixed_point,
                                  int_red_Y: *mut png_fixed_point,
                                  int_red_Z: *mut png_fixed_point,
                                  int_green_X: *mut png_fixed_point,
                                  int_green_Y: *mut png_fixed_point,
                                  int_green_Z: *mut png_fixed_point,
                                  int_blue_X: *mut png_fixed_point,
                                  int_blue_Y: *mut png_fixed_point,
                                  int_blue_Z: *mut png_fixed_point)
     -> png_uint_32;
    pub fn png_set_cHRM(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        white_x: f64, white_y: f64, red_x: f64, red_y: f64,
                        green_x: f64, green_y: f64, blue_x: f64, blue_y: f64);
    pub fn png_set_cHRM_XYZ(png_ptr: png_const_structrp, info_ptr: png_inforp,
                            red_X: f64, red_Y: f64, red_Z: f64, green_X: f64,
                            green_Y: f64, green_Z: f64, blue_X: f64,
                            blue_Y: f64, blue_Z: f64);
    pub fn png_set_cHRM_fixed(png_ptr: png_const_structrp,
                              info_ptr: png_inforp,
                              int_white_x: png_fixed_point,
                              int_white_y: png_fixed_point,
                              int_red_x: png_fixed_point,
                              int_red_y: png_fixed_point,
                              int_green_x: png_fixed_point,
                              int_green_y: png_fixed_point,
                              int_blue_x: png_fixed_point,
                              int_blue_y: png_fixed_point);
    pub fn png_set_cHRM_XYZ_fixed(png_ptr: png_const_structrp,
                                  info_ptr: png_inforp,
                                  int_red_X: png_fixed_point,
                                  int_red_Y: png_fixed_point,
                                  int_red_Z: png_fixed_point,
                                  int_green_X: png_fixed_point,
                                  int_green_Y: png_fixed_point,
                                  int_green_Z: png_fixed_point,
                                  int_blue_X: png_fixed_point,
                                  int_blue_Y: png_fixed_point,
                                  int_blue_Z: png_fixed_point);
    pub fn png_get_gAMA(png_ptr: png_const_structrp,
                        info_ptr: png_const_inforp, file_gamma: *mut f64)
     -> png_uint_32;
    pub fn png_get_gAMA_fixed(png_ptr: png_const_structrp,
                              info_ptr: png_const_inforp,
                              int_file_gamma: *mut png_fixed_point)
     -> png_uint_32;
    pub fn png_set_gAMA(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        file_gamma: f64);
    pub fn png_set_gAMA_fixed(png_ptr: png_const_structrp,
                              info_ptr: png_inforp,
                              int_file_gamma: png_fixed_point);
    pub fn png_get_hIST(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        hist: *mut png_uint_16p) -> png_uint_32;
    pub fn png_set_hIST(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        hist: png_const_uint_16p);
    pub fn png_get_IHDR(png_ptr: png_const_structrp,
                        info_ptr: png_const_inforp, width: *mut png_uint_32,
                        height: *mut png_uint_32,
                        bit_depth: *mut ::std::os::raw::c_int,
                        color_type: *mut ::std::os::raw::c_int,
                        interlace_method: *mut ::std::os::raw::c_int,
                        compression_method: *mut ::std::os::raw::c_int,
                        filter_method: *mut ::std::os::raw::c_int)
     -> png_uint_32;
    pub fn png_set_IHDR(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        width: png_uint_32, height: png_uint_32,
                        bit_depth: ::std::os::raw::c_int,
                        color_type: ::std::os::raw::c_int,
                        interlace_method: ::std::os::raw::c_int,
                        compression_method: ::std::os::raw::c_int,
                        filter_method: ::std::os::raw::c_int);
    pub fn png_get_oFFs(png_ptr: png_const_structrp,
                        info_ptr: png_const_inforp, offset_x: *mut png_int_32,
                        offset_y: *mut png_int_32,
                        unit_type: *mut ::std::os::raw::c_int) -> png_uint_32;
    pub fn png_set_oFFs(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        offset_x: png_int_32, offset_y: png_int_32,
                        unit_type: ::std::os::raw::c_int);
    pub fn png_get_pCAL(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        purpose: *mut png_charp, X0: *mut png_int_32,
                        X1: *mut png_int_32,
                        type_: *mut ::std::os::raw::c_int,
                        nparams: *mut ::std::os::raw::c_int,
                        units: *mut png_charp, params: *mut png_charpp)
     -> png_uint_32;
    pub fn png_set_pCAL(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        purpose: png_const_charp, X0: png_int_32,
                        X1: png_int_32, type_: ::std::os::raw::c_int,
                        nparams: ::std::os::raw::c_int,
                        units: png_const_charp, params: png_charpp);
    pub fn png_get_pHYs(png_ptr: png_const_structrp,
                        info_ptr: png_const_inforp, res_x: *mut png_uint_32,
                        res_y: *mut png_uint_32,
                        unit_type: *mut ::std::os::raw::c_int) -> png_uint_32;
    pub fn png_set_pHYs(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        res_x: png_uint_32, res_y: png_uint_32,
                        unit_type: ::std::os::raw::c_int);
    pub fn png_get_PLTE(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        palette: *mut png_colorp,
                        num_palette: *mut ::std::os::raw::c_int)
     -> png_uint_32;
    pub fn png_set_PLTE(png_ptr: png_structrp, info_ptr: png_inforp,
                        palette: png_const_colorp,
                        num_palette: ::std::os::raw::c_int);
    pub fn png_get_sBIT(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        sig_bit: *mut png_color_8p) -> png_uint_32;
    pub fn png_set_sBIT(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        sig_bit: png_const_color_8p);
    pub fn png_get_sRGB(png_ptr: png_const_structrp,
                        info_ptr: png_const_inforp,
                        file_srgb_intent: *mut ::std::os::raw::c_int)
     -> png_uint_32;
    pub fn png_set_sRGB(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        srgb_intent: ::std::os::raw::c_int);
    pub fn png_set_sRGB_gAMA_and_cHRM(png_ptr: png_const_structrp,
                                      info_ptr: png_inforp,
                                      srgb_intent: ::std::os::raw::c_int);
    pub fn png_get_iCCP(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        name: png_charpp,
                        compression_type: *mut ::std::os::raw::c_int,
                        profile: png_bytepp, proflen: *mut png_uint_32)
     -> png_uint_32;
    pub fn png_set_iCCP(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        name: png_const_charp,
                        compression_type: ::std::os::raw::c_int,
                        profile: png_const_bytep, proflen: png_uint_32);
    pub fn png_get_sPLT(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        entries: png_sPLT_tpp) -> ::std::os::raw::c_int;
    pub fn png_set_sPLT(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        entries: png_const_sPLT_tp,
                        nentries: ::std::os::raw::c_int);
    pub fn png_get_text(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        text_ptr: *mut png_textp,
                        num_text: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn png_set_text(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        text_ptr: png_const_textp,
                        num_text: ::std::os::raw::c_int);
    pub fn png_get_tIME(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        mod_time: *mut png_timep) -> png_uint_32;
    pub fn png_set_tIME(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        mod_time: png_const_timep);
    pub fn png_get_tRNS(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        trans_alpha: *mut png_bytep,
                        num_trans: *mut ::std::os::raw::c_int,
                        trans_color: *mut png_color_16p) -> png_uint_32;
    pub fn png_set_tRNS(png_ptr: png_structrp, info_ptr: png_inforp,
                        trans_alpha: png_const_bytep,
                        num_trans: ::std::os::raw::c_int,
                        trans_color: png_const_color_16p);
    pub fn png_get_sCAL(png_ptr: png_const_structrp,
                        info_ptr: png_const_inforp,
                        unit: *mut ::std::os::raw::c_int, width: *mut f64,
                        height: *mut f64) -> png_uint_32;
    pub fn png_get_sCAL_fixed(png_ptr: png_const_structrp,
                              info_ptr: png_const_inforp,
                              unit: *mut ::std::os::raw::c_int,
                              width: *mut png_fixed_point,
                              height: *mut png_fixed_point) -> png_uint_32;
    pub fn png_get_sCAL_s(png_ptr: png_const_structrp,
                          info_ptr: png_const_inforp,
                          unit: *mut ::std::os::raw::c_int,
                          swidth: png_charpp, sheight: png_charpp)
     -> png_uint_32;
    pub fn png_set_sCAL(png_ptr: png_const_structrp, info_ptr: png_inforp,
                        unit: ::std::os::raw::c_int, width: f64, height: f64);
    pub fn png_set_sCAL_fixed(png_ptr: png_const_structrp,
                              info_ptr: png_inforp,
                              unit: ::std::os::raw::c_int,
                              width: png_fixed_point,
                              height: png_fixed_point);
    pub fn png_set_sCAL_s(png_ptr: png_const_structrp, info_ptr: png_inforp,
                          unit: ::std::os::raw::c_int,
                          swidth: png_const_charp, sheight: png_const_charp);
    pub fn png_set_keep_unknown_chunks(png_ptr: png_structrp,
                                       keep: ::std::os::raw::c_int,
                                       chunk_list: png_const_bytep,
                                       num_chunks: ::std::os::raw::c_int);
    pub fn png_handle_as_unknown(png_ptr: png_const_structrp,
                                 chunk_name: png_const_bytep)
     -> ::std::os::raw::c_int;
    pub fn png_set_unknown_chunks(png_ptr: png_const_structrp,
                                  info_ptr: png_inforp,
                                  unknowns: png_const_unknown_chunkp,
                                  num_unknowns: ::std::os::raw::c_int);
    pub fn png_set_unknown_chunk_location(png_ptr: png_const_structrp,
                                          info_ptr: png_inforp,
                                          chunk: ::std::os::raw::c_int,
                                          location: ::std::os::raw::c_int);
    pub fn png_get_unknown_chunks(png_ptr: png_const_structrp,
                                  info_ptr: png_inforp,
                                  entries: png_unknown_chunkpp)
     -> ::std::os::raw::c_int;
    pub fn png_set_invalid(png_ptr: png_const_structrp, info_ptr: png_inforp,
                           mask: ::std::os::raw::c_int);
    pub fn png_read_png(png_ptr: png_structrp, info_ptr: png_inforp,
                        transforms: ::std::os::raw::c_int, params: png_voidp);
    pub fn png_write_png(png_ptr: png_structrp, info_ptr: png_inforp,
                         transforms: ::std::os::raw::c_int,
                         params: png_voidp);
    pub fn png_get_copyright(png_ptr: png_const_structrp) -> png_const_charp;
    pub fn png_get_header_ver(png_ptr: png_const_structrp) -> png_const_charp;
    pub fn png_get_header_version(png_ptr: png_const_structrp)
     -> png_const_charp;
    pub fn png_get_libpng_ver(png_ptr: png_const_structrp) -> png_const_charp;
    pub fn png_permit_mng_features(png_ptr: png_structrp,
                                   mng_features_permitted: png_uint_32)
     -> png_uint_32;
    pub fn png_set_user_limits(png_ptr: png_structrp,
                               user_width_max: png_uint_32,
                               user_height_max: png_uint_32);
    pub fn png_get_user_width_max(png_ptr: png_const_structrp) -> png_uint_32;
    pub fn png_get_user_height_max(png_ptr: png_const_structrp)
     -> png_uint_32;
    pub fn png_set_chunk_cache_max(png_ptr: png_structrp,
                                   user_chunk_cache_max: png_uint_32);
    pub fn png_get_chunk_cache_max(png_ptr: png_const_structrp)
     -> png_uint_32;
    pub fn png_set_chunk_malloc_max(png_ptr: png_structrp,
                                    user_chunk_cache_max: png_alloc_size_t);
    pub fn png_get_chunk_malloc_max(png_ptr: png_const_structrp)
     -> png_alloc_size_t;
    pub fn png_get_pixels_per_inch(png_ptr: png_const_structrp,
                                   info_ptr: png_const_inforp) -> png_uint_32;
    pub fn png_get_x_pixels_per_inch(png_ptr: png_const_structrp,
                                     info_ptr: png_const_inforp)
     -> png_uint_32;
    pub fn png_get_y_pixels_per_inch(png_ptr: png_const_structrp,
                                     info_ptr: png_const_inforp)
     -> png_uint_32;
    pub fn png_get_x_offset_inches(png_ptr: png_const_structrp,
                                   info_ptr: png_const_inforp) -> f32;
    pub fn png_get_x_offset_inches_fixed(png_ptr: png_const_structrp,
                                         info_ptr: png_const_inforp)
     -> png_fixed_point;
    pub fn png_get_y_offset_inches(png_ptr: png_const_structrp,
                                   info_ptr: png_const_inforp) -> f32;
    pub fn png_get_y_offset_inches_fixed(png_ptr: png_const_structrp,
                                         info_ptr: png_const_inforp)
     -> png_fixed_point;
    pub fn png_get_pHYs_dpi(png_ptr: png_const_structrp,
                            info_ptr: png_const_inforp,
                            res_x: *mut png_uint_32, res_y: *mut png_uint_32,
                            unit_type: *mut ::std::os::raw::c_int)
     -> png_uint_32;
    pub fn png_get_io_state(png_ptr: png_const_structrp) -> png_uint_32;
    pub fn png_get_io_chunk_type(png_ptr: png_const_structrp) -> png_uint_32;
    pub fn png_get_uint_32(buf: png_const_bytep) -> png_uint_32;
    pub fn png_get_uint_16(buf: png_const_bytep) -> png_uint_16;
    pub fn png_get_int_32(buf: png_const_bytep) -> png_int_32;
    pub fn png_get_uint_31(png_ptr: png_const_structrp, buf: png_const_bytep)
     -> png_uint_32;
    pub fn png_save_uint_32(buf: png_bytep, i: png_uint_32);
    pub fn png_save_int_32(buf: png_bytep, i: png_int_32);
    pub fn png_save_uint_16(buf: png_bytep, i: ::std::os::raw::c_uint);
    pub fn png_set_check_for_invalid_index(png_ptr: png_structrp,
                                           allowed: ::std::os::raw::c_int);
    pub fn png_get_palette_max(png_ptr: png_const_structp,
                               info_ptr: png_const_infop)
     -> ::std::os::raw::c_int;
    pub fn png_image_begin_read_from_file(image: png_imagep,
                                          file_name:
                                              *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn png_image_begin_read_from_stdio(image: png_imagep, file: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn png_image_begin_read_from_memory(image: png_imagep,
                                            memory: png_const_voidp,
                                            size: png_size_t)
     -> ::std::os::raw::c_int;
    pub fn png_image_finish_read(image: png_imagep,
                                 background: png_const_colorp,
                                 buffer: *mut ::std::os::raw::c_void,
                                 row_stride: png_int_32,
                                 colormap: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn png_image_free(image: png_imagep);
    pub fn png_image_write_to_file(image: png_imagep,
                                   file: *const ::std::os::raw::c_char,
                                   convert_to_8bit: ::std::os::raw::c_int,
                                   buffer: *const ::std::os::raw::c_void,
                                   row_stride: png_int_32,
                                   colormap: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn png_image_write_to_stdio(image: png_imagep, file: *mut FILE,
                                    convert_to_8_bit: ::std::os::raw::c_int,
                                    buffer: *const ::std::os::raw::c_void,
                                    row_stride: png_int_32,
                                    colormap: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn png_image_write_to_memory(image: png_imagep,
                                     memory: *mut ::std::os::raw::c_void,
                                     memory_bytes: *mut png_alloc_size_t,
                                     convert_to_8_bit: ::std::os::raw::c_int,
                                     buffer: *const ::std::os::raw::c_void,
                                     row_stride: png_int_32,
                                     colormap: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn png_set_option(png_ptr: png_structrp,
                          option: ::std::os::raw::c_int,
                          onoff: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
